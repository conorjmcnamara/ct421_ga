import random
from typing import List


def init_population(
    population_size: int,
    num_cities: int,
    distance_matrix: List[List[float]],
    random_rate: float
) -> List[List[int]]:
    """
    Initialises a population of individuals (solutions) for a genetic algorithm. Each individual
    represents a route through a set of cities. The population is initialised with a mix of random
    individuals and individuals generated by a greedy heuristic.

    Args:
        population_size: The number of individuals to be created in the population.
        num_cities: The total number of cities.
        distance_matrix: A square matrix representing the distances between each pair of cities.
        random_rate: The probability of initialising an individual randomly.

    Returns:
        A list of individuals, where each individual is a list of city indices.
    """
    population = []

    for _ in range(population_size):
        if random.random() < random_rate:
            individual = random.sample(range(num_cities), num_cities)
        else:
            individual = greedy_heuristic(num_cities, distance_matrix)

        population.append(individual)
    return population


def greedy_heuristic(num_cities: int, distance_matrix: List[List[float]]) -> List[int]:
    """
    Generates a solution to the Traveling Salesman Problem (TSP) using a greedy heuristic. The
    heuristic selects the nearest unvisited city at each step, starting from a random city.

    Args:
        num_cities: The total number of cities.
        distance_matrix: A square matrix representing the distances between each pair of cities.

    Returns:
        A list of city indicies representing an individual.
    """
    cities = set(range(num_cities))
    start_city = random.choice(list(cities))
    path = [start_city]
    cities.remove(start_city)

    curr_city = start_city
    while cities:
        next_city = min(cities, key=lambda city: distance_matrix[curr_city][city])
        path.append(next_city)
        cities.remove(next_city)
        curr_city = next_city
    return path
